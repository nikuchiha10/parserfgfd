const puppeteer = require('puppeteer-extra');
const stealthPlugin = require('puppeteer-extra-plugin-stealth');
const config = require('./config');
const fs = require('fs').promises;
const path = require('path');

puppeteer.use(stealthPlugin());

class KnowledgeBaseParser {
    constructor() {
        this.browser = null;
        this.page = null;
        this.isAuthenticated = false;
        this.parsedArticles = new Map();
        this.stats = {
            total: 0,
            success: 0,
            failed: 0,
            skipped: 0
        };
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...');
        
        try {
            this.browser = await puppeteer.launch({
                headless: config.BROWSER.HEADLESS,
                executablePath: config.BROWSER.EXECUTABLE_PATH,
                args: config.BROWSER.ARGS,
                defaultViewport: config.BROWSER.VIEWPORT
            });

            this.page = await this.browser.newPage();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
            this.page.setDefaultTimeout(config.PARSER.TIMEOUT);
            this.page.setDefaultNavigationTimeout(config.PARSER.TIMEOUT);

            // –ü–µ—Ä–µ—Ö–≤–∞—Ç console.log –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
            this.page.on('console', msg => {
                if (msg.type() === 'log') {
                    console.log(`[BROWSER]: ${msg.text()}`);
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.page.on('pageerror', error => {
                console.error(`[PAGE ERROR]: ${error}`);
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            await this.page.setRequestInterception(true);
            this.page.on('request', (request) => {
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                if (['image', 'stylesheet', 'font'].includes(request.resourceType())) {
                    request.abort();
                } else {
                    request.continue();
                }
            });

            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
            throw error;
        }
    }

    async authenticate() {
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        try {
            await this.page.goto(config.PARSER.BASE_URL, {
                waitUntil: 'networkidle2'
            });

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await this.waitForAuth();

            this.isAuthenticated = true;
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            return false;
        }
    }

    async waitForAuth() {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        const authIndicators = config.SELECTORS.AUTH_INDICATORS;
        
        for (let attempt = 1; attempt <= config.PARSER.WAIT_FOR_AUTH_ATTEMPTS; attempt++) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                for (const selector of authIndicators) {
                    const element = await this.page.$(selector);
                    if (element) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${selector}`);
                        return true;
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                const currentUrl = this.page.url();
                if (currentUrl.includes('dashboard') || 
                    currentUrl.includes('content') || 
                    !currentUrl.includes('login')) {
                    console.log('‚úÖ URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
                    return true;
                }

                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${config.PARSER.WAIT_FOR_AUTH_ATTEMPTS} - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞`);
                await this.page.waitForTimeout(config.PARSER.AUTH_CHECK_INTERVAL);
                
            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error.message);
                await this.page.waitForTimeout(config.PARSER.AUTH_CHECK_INTERVAL);
            }
        }

        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
    }

    async searchArticle(articleTitle) {
        console.log(`üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏: "${articleTitle}"`);
        
        try {
            // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –ø–æ–ª—è
            const searchSelector = 'input[type="search"], input[placeholder*="earch"], .search-input, #search';
            await this.page.waitForSelector(searchSelector, { timeout: 10000 });
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
            await this.page.click(searchSelector, { clickCount: 3 });
            await this.page.type(searchSelector, articleTitle, { delay: 100 });
            
            // –ù–∞–∂–∏–º–∞–µ–º Enter –¥–ª—è –ø–æ–∏—Å–∫–∞
            await this.page.keyboard.press('Enter');
            
            // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await this.page.waitForTimeout(3000);
            
            // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
            const articleLinks = await this.page.$$eval(config.SELECTORS.LINK_SELECTORS.join(','), 
                (links, title) => {
                    return links
                        .filter(link => {
                            const linkText = link.textContent.toLowerCase().trim();
                            const titleLower = title.toLowerCase().trim();
                            return linkText.includes(titleLower) || 
                                   titleLower.includes(linkText);
                        })
                        .map(link => ({
                            href: link.href,
                            text: link.textContent.trim(),
                            title: link.title || link.textContent.trim()
                        }));
                }, 
                articleTitle
            );

            if (articleLinks.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${articleLinks.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "${articleTitle}"`);
                return articleLinks[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            } else {
                console.log(`‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: "${articleTitle}"`);
                return null;
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç—å–∏ "${articleTitle}":`, error);
            return null;
        }
    }

    async parseArticleContent(articleUrl) {
        console.log(`üìñ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—å–∏: ${articleUrl}`);
        
        try {
            await this.page.goto(articleUrl, {
                waitUntil: 'networkidle2',
                timeout: config.PARSER.TIMEOUT
            });

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await this.page.waitForTimeout(2000);

            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await this.autoScroll();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const title = await this.extractTitle();
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            const content = await this.extractContent();
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const metadata = await this.extractMetadata();

            return {
                title,
                content,
                metadata,
                url: articleUrl,
                timestamp: new Date().toISOString(),
                wordCount: content ? content.split(/\s+/).length : 0
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—å–∏ ${articleUrl}:`, error);
            return null;
        }
    }

    async extractTitle() {
        for (const selector of config.SELECTORS.TITLE_SELECTORS) {
            try {
                const titleElement = await this.page.$(selector);
                if (titleElement) {
                    const title = await this.page.evaluate(el => el.textContent.trim(), titleElement);
                    if (title && title.length > 0) {
                        return title;
                    }
                }
            } catch (error) {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                continue;
            }
        }
        return '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }

    async extractContent() {
        let content = '';
        
        for (const selector of config.SELECTORS.CONTENT_SELECTORS) {
            try {
                const contentElements = await this.page.$$(selector);
                for (const element of contentElements) {
                    const elementContent = await this.page.evaluate(el => {
                        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
                        return el.textContent
                            .replace(/\s+/g, ' ')
                            .replace(/\n+/g, '\n')
                            .trim();
                    }, element);
                    
                    if (elementContent && elementContent.length > 50) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        content += elementContent + '\n\n';
                    }
                }
            } catch (error) {
                continue;
            }
        }

        return content.trim() || '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }

    async extractMetadata() {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const metadata = await this.page.evaluate(() => {
                const metaTags = {};
                const metaElements = document.querySelectorAll('meta[name], meta[property]');
                
                metaElements.forEach(meta => {
                    const name = meta.getAttribute('name') || meta.getAttribute('property');
                    const content = meta.getAttribute('content');
                    if (name && content) {
                        metaTags[name] = content;
                    }
                });

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                const lastModified = document.lastModified || new Date().toISOString();
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const language = document.documentElement.lang || 'ru';

                return {
                    metaTags,
                    lastModified,
                    language,
                    url: window.location.href
                };
            });

            return metadata;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
            return {};
        }
    }

    async autoScroll() {
        await this.page.evaluate(async (scrollDelay) => {
            await new Promise((resolve) => {
                let totalHeight = 0;
                const distance = 100;
                const timer = setInterval(() => {
                    const scrollHeight = document.body.scrollHeight;
                    window.scrollBy(0, distance);
                    totalHeight += distance;

                    if (totalHeight >= scrollHeight) {
                        clearInterval(timer);
                        resolve();
                    }
                }, scrollDelay);
            });
        }, config.PARSER.SCROLL_DELAY);
    }

    async saveArticle(articleData, filename = null) {
        try {
            const dataDir = config.FILES.DATA_DIR;
            await fs.mkdir(dataDir, { recursive: true });

            if (!filename) {
                // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                filename = articleData.title
                    .toLowerCase()
                    .replace(/[^a-z0-9–∞-—è—ë]/g, '_')
                    .replace(/_+/g, '_')
                    .substring(0, 100) + '.json';
            }

            const filePath = path.join(dataDir, filename);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            await fs.writeFile(
                filePath, 
                JSON.stringify(articleData, null, 2), 
                'utf8'
            );

            console.log(`üíæ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${filePath}`);
            return filePath;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
            throw error;
        }
    }

    async parseAllArticles(articlesList, options = {}) {
        const {
            delay = config.PARSER.ARTICLE_PARSE_DELAY,
            maxArticles = null,
            skipExisting = true
        } = options;

        console.log(`üéØ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${maxArticles || articlesList.length} —Å—Ç–∞—Ç–µ–π`);
        
        this.stats.total = maxArticles ? Math.min(maxArticles, articlesList.length) : articlesList.length;
        
        for (let i = 0; i < articlesList.length; i++) {
            if (maxArticles && i >= maxArticles) break;

            const articleTitle = articlesList[i];
            console.log(`\n--- [${i + 1}/${this.stats.total}] ${articleTitle} ---`);

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–∞—Ä—Å–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Å—Ç–∞—Ç—å—é
                if (skipExisting && this.parsedArticles.has(articleTitle)) {
                    console.log('‚è≠Ô∏è –°—Ç–∞—Ç—å—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    this.stats.skipped++;
                    continue;
                }

                // –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏
                const articleLink = await this.searchArticle(articleTitle);
                if (!articleLink) {
                    console.log('‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    this.stats.failed++;
                    continue;
                }

                // –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                const articleContent = await this.parseArticleContent(articleLink.href);
                if (!articleContent) {
                    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏');
                    this.stats.failed++;
                    continue;
                }

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                await this.saveArticle(articleContent);
                this.parsedArticles.set(articleTitle, articleContent);
                this.stats.success++;

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if (delay > 0 && i < articlesList.length - 1) {
                    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms...`);
                    await this.page.waitForTimeout(delay);
                }

            } catch (error) {
                console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏:`, error);
                this.stats.failed++;
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞—Ç–µ–π
                continue;
            }
        }

        this.printStats();
        return this.stats;
    }

    printStats() {
        console.log('\nüìä ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê ==========');
        console.log(`üìà –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${this.stats.total}`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${this.stats.success}`);
        console.log(`‚ùå –û—à–∏–±–∫–∏: ${this.stats.failed}`);
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.stats.skipped}`);
        console.log(`üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${((this.stats.success / this.stats.total) * 100).toFixed(2)}%`);
        console.log('==========================================\n');
    }

    async exportToCSV() {
        try {
            const dataDir = config.FILES.DATA_DIR;
            const csvPath = path.join(dataDir, 'articles_export.csv');
            
            let csvContent = 'Title,URL,Word Count,Timestamp\n';
            
            for (const [title, article] of this.parsedArticles) {
                const row = [
                    `"${title.replace(/"/g, '""')}"`,
                    `"${article.url}"`,
                    article.wordCount,
                    article.timestamp
                ].join(',');
                
                csvContent += row + '\n';
            }

            await fs.writeFile(csvPath, csvContent, 'utf8');
            console.log(`üìä CSV —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: ${csvPath}`);
            
            return csvPath;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV:', error);
            throw error;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    async retryOperation(operation, maxAttempts = config.PARSER.RETRY_ATTEMPTS) {
        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                return await operation();
            } catch (error) {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
                
                if (attempt === maxAttempts) {
                    throw error;
                }
                
                // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                const delay = Math.min(1000 * Math.pow(2, attempt), 30000);
                console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}ms...`);
                await this.page.waitForTimeout(delay);
            }
        }
    }
}

module.exports = KnowledgeBaseParser;
